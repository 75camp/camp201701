!function(I){function g(A){if(C[A])return C[A].exports;var n=C[A]={exports:{},id:A,loaded:!1};return I[A].call(n.exports,n,n.exports,g),n.loaded=!0,n.exports}var C={};return g.m=I,g.c=C,g.p="",g(0)}([function(module,exports,__webpack_require__){eval("'use strict';\n\n__webpack_require__(2);\n\n__webpack_require__(3);\n\nvar _nZepto = __webpack_require__(4);\n\nvar _nZepto2 = _interopRequireDefault(_nZepto);\n\n__webpack_require__(5);\n\n__webpack_require__(6);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n'use strict';\n\n(0, _nZepto2.default)(function () {\n\n    var url = __webpack_require__(1),\n        $img = (0, _nZepto2.default)('#detail img');\n\n    $img.attr('src', url);\n\n    window.addEventListener('touchstart', function (event) {\n        event.preventDefault();\n    }, false);\n\n    var gameBoyPromise = function gameBoyPromise(selector, type) {\n        return new Promise(function (resolve) {\n            return (0, _nZepto2.default)(selector).on(type, resolve);\n        });\n    };\n    //前置动画\n    (function () {\n\n        //插卡\n        gameBoyPromise('#game-card-box', 'swipeDown')\n        //卡向下走\n        .then(function () {\n            return gameBoyPromise((0, _nZepto2.default)('#game-card').addClass('to-bot').selector, 'transitionend');\n        })\n        //插卡提示动画消失\n        .then(function () {\n            return gameBoyPromise((0, _nZepto2.default)('#insert-card').removeClass('flash infinite').addClass('fadeOut').selector, 'webkitAnimationEnd animationend');\n        }).then(function () {\n            //水花蹦出\n            (0, _nZepto2.default)('#water').addClass('to-top');\n            return gameBoyPromise('#water', 'transitionend');\n        })\n        //水花蹦出后足球蹦出\n        .then(function () {\n            return gameBoyPromise((0, _nZepto2.default)('.football').addClass('to-top').selector, 'transitionend');\n        })\n        //然后排球蹦出\n        .then(function () {\n            return gameBoyPromise((0, _nZepto2.default)('.volleyball').addClass('to-top').selector, 'transitionend');\n        })\n        //然后网球蹦出\n        .then(function () {\n            return gameBoyPromise((0, _nZepto2.default)('.tennis').addClass('to-top').selector, 'transitionend');\n        })\n        //哔！！！还有对话线,雪花，屏幕闪烁\n        .then(function () {\n            (0, _nZepto2.default)('#gb-solid').removeClass('solid-flash').addClass('talk-solid-flash');\n            (0, _nZepto2.default)('.text').css('opacity', 1).addClass('pulse');\n            (0, _nZepto2.default)('.gb-player-bg').addClass('fadeOut');\n            (0, _nZepto2.default)('#xuehua').addClass('to-top');\n            (0, _nZepto2.default)('#music-btn').addClass('fadeOut');\n            return gameBoyPromise((0, _nZepto2.default)('#cover-area').addClass('cover-flash').selector, 'webkitAnimationEnd animationend');\n        })\n        //进入标题，小人蹦蹦蹦！！！\n        .then(function () {\n            (0, _nZepto2.default)('#music-btn').hide();\n            (0, _nZepto2.default)('#cover-area').css('zIndex', -20);\n            (0, _nZepto2.default)('#content-gb-wrapper').addClass('fadeIn');\n            (0, _nZepto2.default)('.person').each(function (index, ele) {\n                (0, _nZepto2.default)(ele).addClass('person' + (index + 1));\n            });\n            return gameBoyPromise((0, _nZepto2.default)('.title-h1').addClass('flash').selector, 'webkitAnimationEnd animationend');\n        })\n        //进入操作指示页面\n        .then(function () {\n            (0, _nZepto2.default)('.person').removeClass('animated');\n            (0, _nZepto2.default)('#a-btn').removeClass('default').addClass('active');\n            (0, _nZepto2.default)('.guide').addClass('fadeIn');\n        });\n    })();\n\n    //gbPlayer对象\n    var gameBoyPlayer = function () {\n\n        var $aBtn = (0, _nZepto2.default)('#a-btn'),\n            $bBtn = (0, _nZepto2.default)('#b-btn'),\n            $topBtn = (0, _nZepto2.default)('#top-btn'),\n            $leftBtn = (0, _nZepto2.default)('#left-btn'),\n            $rightBtn = (0, _nZepto2.default)('#right-btn'),\n            $botBtn = (0, _nZepto2.default)('#bot-btn'),\n            $content = (0, _nZepto2.default)('#content'),\n            $aContentDiv = (0, _nZepto2.default)('#content>div[class *= \"page\"]'),\n            $detail = (0, _nZepto2.default)('#detail'),\n            $aSection = (0, _nZepto2.default)('#detail>section'),\n            oldIndex = 0,\n            nowIndex = 0,\n            maxTranslateYArr = [],\n            translateY = 0,\n            screenHeight = (0, _nZepto2.default)('.screen').height(),\n            timer = null,\n            tapSpeed = 50,\n            longTapSpeed = 20;\n\n        //暂时留下---------------------------------------------------------------------------------------------------------------------\n        var $aImg = (0, _nZepto2.default)('img');\n        //封装section，maxTranslateYArr\n\n        var state = 0;\n\n        function testState() {\n            if (state === $aImg.length) {\n                $aSection.each(function (index, ele) {\n                    Transform(ele, true);\n                    maxTranslateYArr.push(-((0, _nZepto2.default)(ele).height() - screenHeight));\n                });\n            }\n        }\n\n        $aImg.on('load', function () {\n            state += 1;\n            testState();\n        });\n        //暂时留下---------------------------------------------------------------------------------------------------------------------\n\n\n        //判断btn是否可点击\n        var judgeBtnCantClick = function () {\n            var judgeBtnClassReg = /default/;\n\n            return function ($ele) {\n                return judgeBtnClassReg.test($ele.attr('class'));\n            };\n        }();\n\n        //更改btn的状态\n        function toggleBtnState(btn) {\n            _nZepto2.default.each(btn, function (index, ele) {\n                if (judgeBtnCantClick((0, _nZepto2.default)(ele))) {\n                    (0, _nZepto2.default)(ele).removeClass('default').addClass('active');\n                } else {\n                    (0, _nZepto2.default)(ele).removeClass('active').addClass('default');\n                }\n            });\n        }\n\n        //判断内容页何时切换leftBtn与rightBtn的状态\n        function judgeContentBtnState(boolean) {\n            //判断leftBtn是否切换为active\n            if (boolean && nowIndex === 1) {\n                toggleBtnState($leftBtn);\n            }\n            if (!boolean && nowIndex === 0) {\n                toggleBtnState($leftBtn);\n            }\n            //判断rightBtn\n            if (boolean && nowIndex === $aContentDiv.length - 1) {\n                toggleBtnState([$rightBtn, $bBtn]);\n            }\n            if (!boolean && nowIndex === $aContentDiv.length - 2) {\n                toggleBtnState([$rightBtn, $bBtn]);\n            }\n        }\n\n        //判断详情页切换topBtn与botBtn的状态\n        function judgeDetailBtnState(boolean) {\n            //botBtn\n            if (boolean) {\n                if ($aSection[nowIndex].translateY <= 0 && judgeBtnCantClick($topBtn)) {\n                    toggleBtnState($topBtn);\n                }\n                if ($aSection[nowIndex].translateY <= maxTranslateYArr[nowIndex] && !judgeBtnCantClick($botBtn)) {\n                    toggleBtnState($botBtn);\n                }\n            }\n            //topBtn\n            else {\n                    if ($aSection[nowIndex].translateY >= 0 && !judgeBtnCantClick($topBtn)) {\n                        toggleBtnState($topBtn);\n                    }\n                    if ($aSection[nowIndex].translateY >= maxTranslateYArr[nowIndex] && judgeBtnCantClick($botBtn)) {\n                        toggleBtnState($botBtn);\n                    }\n                }\n        }\n\n        function animationHandle(isAContentDiv, isAnimationStart, isFadeIn, nowIndex) {\n            //animationstart\n            if (isAnimationStart) {\n                if (isFadeIn) {\n                    if (isAContentDiv) {\n                        nowIndex = nowIndex - 1;\n                        $aContentDiv.eq(nowIndex + 1).children('.page-children').css('opacity', 1);\n                        animationFactory();\n                    }\n                    $aContentDiv.eq(nowIndex).children('.page-children').css('opacity', 0).removeClass('page' + (nowIndex + 1) + '-animation fly');\n                    if (nowIndex === 4) {\n                        (0, _nZepto2.default)('.zoushiming').removeClass('appear');\n                    }\n                } else {\n                    if (isAContentDiv) {\n                        $aContentDiv.eq(nowIndex + 1).children('.page-children').css('opacity', 0).removeClass('page' + (nowIndex + 2) + '-animation');\n\n                        if (nowIndex + 1 === 4) {\n                            (0, _nZepto2.default)('.zoushiming').removeClass('appear');\n                        }\n                        animationFactory();\n                    }\n                    $aContentDiv.eq(nowIndex).children('.page-children').css('opacity', 1);\n                }\n            }\n            //animationend\n            else {\n                    $aContentDiv.eq(nowIndex).children('.page-children').addClass('page' + (nowIndex + 1) + '-animation');\n                    if (!isAContentDiv) {\n                        animationFactory();\n                    }\n                }\n        }\n\n        //修改动画\n        function editAnimation() {\n            //start中移除上一页触发动画的class\n            $aContentDiv.on('webkitAnimationStart animationstart', function (event) {\n                //pageX触发动画开始时\n                if (/page[\\d] /.test((0, _nZepto2.default)(event.target).attr('class'))) {\n                    //通过判断class中是否有fadeIn判断向左或向右\n                    //点击rightBtn隐藏并移除前一页animationClass（不隐藏直接移除很突兀）\n                    if (/fadeIn/.test((0, _nZepto2.default)(event.target).attr('class'))) {\n                        animationHandle(true, true, true, nowIndex);\n                    }\n                    //点击leftBtn隐藏并移除前一页animationClass（不隐藏直接移除很突兀）\n                    else {\n                            animationHandle($aContentDiv, true, false, nowIndex);\n                        }\n                }\n            });\n            //end中为本页添加触发动画的class\n            $aContentDiv.on('webkitAnimationEnd animationend', function (event) {\n                //pageX触发动画结束时\n                if (/page[\\d] /.test((0, _nZepto2.default)(event.target).attr('class'))) {\n                    animationHandle(true, false, null, nowIndex);\n                }\n            });\n\n            $detail.on('webkitAnimationStart animationstart', function (event) {\n                if (/fadeIn/.test((0, _nZepto2.default)(event.target).attr('class'))) {\n                    animationHandle(false, true, true, nowIndex);\n                } else {\n                    animationHandle(false, true, false, nowIndex);\n                }\n            });\n\n            $detail.on('webkitAnimationEnd animationend', function () {\n                if (!/fadeIn/.test((0, _nZepto2.default)(event.target).attr('class'))) {\n                    animationHandle(false, false, null, nowIndex);\n                    //切换屏幕z-index\n                    $detail.css('z-index', 10);\n                    $content.css('z-index', 20);\n                }\n            });\n        }\n\n        editAnimation();\n\n        //链式动画库\n        function animationFactory() {\n            //page1Animation\n            if (nowIndex === 0) {\n                gameBoyPromise('.page1-football', 'webkitAnimationEnd animationend').then(function () {\n                    return (0, _nZepto2.default)('.football-player').removeClass('page1-animation').addClass('fly');\n                });\n            }\n            //page5Animation\n            if (nowIndex === 4) {\n                gameBoyPromise('.sprite-ball', 'webkitAnimationEnd animationend').then(function () {\n                    return (0, _nZepto2.default)('.zoushiming').addClass('appear');\n                });\n            }\n        }\n\n        //切换contentPage\n        function getContentPage(boolean) {\n            //true+一页，false减一页\n            if (boolean) {\n                nowIndex = oldIndex + 1;\n            } else {\n                nowIndex = oldIndex - 1;\n            }\n\n            judgeContentBtnState(boolean);\n\n            //如果是rightBtn，后一页fadeIn进入\n            if (boolean) {\n                $aContentDiv.eq(nowIndex).removeClass('fadeOut').addClass('fadeIn');\n            }\n            //如果是leftBtn，\n            else {\n                    $aContentDiv.eq(oldIndex).removeClass('fadeIn').addClass('fadeOut');\n                }\n\n            oldIndex = nowIndex;\n        }\n\n        //推进toggleBtnArr\n        function pushToggleBtnArr(isAHandle, judgeBtnArr, toggleBtnArr) {\n            _nZepto2.default.each(judgeBtnArr, function (index, $ele) {\n                if (!judgeBtnCantClick($ele)) {\n                    toggleBtnArr.push($ele);\n                }\n            });\n            if (!isAHandle) {\n                if (nowIndex !== 0) {\n                    toggleBtnArr.push($leftBtn);\n                }\n                if (nowIndex !== $aContentDiv.length - 1) {\n                    toggleBtnArr.push($rightBtn);\n                }\n            }\n\n            return toggleBtnArr;\n        }\n\n        return {\n            state: 0, //0-操作指导页面, 1-内容页, 2-详情页\n            timer: timer,\n            controller: {\n                aBtn: $aBtn,\n                bBtn: $bBtn,\n                topBtn: $topBtn,\n                botBtn: $botBtn,\n                leftBtn: $leftBtn,\n                rightBtn: $rightBtn\n            },\n            handle: {\n                aBtnHandle: function aBtnHandle() {\n                    var toggleBtnArr = [$botBtn, $aBtn, $bBtn];\n\n                    if (judgeBtnCantClick($aBtn)) {\n                        return;\n                    }\n                    //第一次从操作指导页面进入详情页\n                    if (this.state === 0) {\n                        this.state++;\n\n                        //切换屏幕z-index\n                        (0, _nZepto2.default)('#nav').css('z-index', 10);\n                        $content.css('z-index', 20);\n\n                        toggleBtnState($rightBtn);\n                        gameBoyPromise($content.addClass('fadeIn').selector, 'webkitAnimationEnd animationend').then(function () {\n                            (0, _nZepto2.default)('.football-player').addClass('page1-animation');\n                            return gameBoyPromise((0, _nZepto2.default)('.page1-football').addClass('page1-animation').selector, 'webkitAnimationEnd animationend');\n                        }).then(function () {\n                            return (0, _nZepto2.default)('.football-player').removeClass('page1-animation').addClass('fly');\n                        });\n                    }\n                    //进入详情页\n                    else if (this.state === 1) {\n\n                            //切换屏幕z-index\n                            $content.css('z-index', 10);\n                            $detail.css('z-index', 20);\n\n                            //分享页点击aBtn刷新\n                            if (nowIndex === $aContentDiv.length - 1) {\n                                window.location = window.location.href + '?' + new Date().getTime();\n                            }\n\n                            this.state++;\n                            $aSection.css('opacity', 0);\n                            $aSection.eq(nowIndex).css('opacity', 1);\n\n                            $detail.removeClass('fadeOut').addClass('fadeIn');\n\n                            //左右按钮class为不为default的加入到切换数组中\n                            pushToggleBtnArr(true, [$leftBtn, $rightBtn], toggleBtnArr);\n\n                            toggleBtnState(toggleBtnArr);\n                        }\n                },\n                bBtnHandle: function bBtnHandle() {\n                    var toggleBtnArr = [$aBtn, $bBtn];\n\n                    if (judgeBtnCantClick($bBtn)) {\n                        return;\n                    }\n\n                    //内容页最后一页分享页，点击B弹层\n                    if (this.state === 1) {\n                        (0, _nZepto2.default)('.area-share').css('z-index', 20);\n                    }\n\n                    if (judgeBtnCantClick($bBtn) || this.state !== 2) {\n                        return;\n                    }\n\n                    $detail.removeClass('fadeIn').addClass('fadeOut');\n\n                    translateY = 0;\n                    $aSection.css('transition', 'none');\n                    $aSection.each(function (index, ele) {\n                        ele.translateY = 0;\n                    });\n\n                    pushToggleBtnArr(false, [$topBtn, $botBtn], toggleBtnArr);\n\n                    toggleBtnState(toggleBtnArr);\n\n                    this.state--;\n                },\n                xDirHandle: function xDirHandle() {\n                    //如果按钮不是可点击状态则返回\n                    if (judgeBtnCantClick((0, _nZepto2.default)(this))) {\n                        return;\n                    }\n                    //判断点击left还是right\n                    if (/right/.test((0, _nZepto2.default)(this).attr('class'))) {\n                        getContentPage(true);\n                    } else {\n                        getContentPage(false);\n                    }\n                },\n                yDirHandle: function yDirHandle(event, clickBotBtn, longTap) {\n                    if (judgeBtnCantClick((0, _nZepto2.default)(event.target))) {\n                        return;\n                    }\n                    //长按\n                    if (longTap) {\n                        $aSection.eq(nowIndex).css('transition', 'none');\n                        this.timer = setInterval(function () {\n                            translateY = $aSection[nowIndex].translateY;\n\n                            this.handle.moveHandle(clickBotBtn, longTapSpeed);\n                        }.bind(this), 30);\n                    }\n                    //点击\n                    else {\n                            $aSection.eq(nowIndex).css('transition', '.3s ease');\n\n                            this.handle.moveHandle(clickBotBtn, tapSpeed);\n                        }\n                },\n                moveHandle: function moveHandle(clickBotBtn, speed) {\n                    if (clickBotBtn) {\n                        translateY -= speed;\n                    } else {\n                        translateY += speed;\n                    }\n\n                    //控制translateY范围\n                    if (translateY >= 0) {\n                        translateY = 0;\n                    } else if (translateY <= maxTranslateYArr[nowIndex]) {\n                        translateY = maxTranslateYArr[nowIndex];\n                    }\n\n                    $aSection[nowIndex].translateY = translateY;\n\n                    judgeDetailBtnState(clickBotBtn);\n                }\n            }\n        };\n    }();\n\n    //aBtn，bBtn点击\n    gameBoyPlayer.controller.aBtn.on('tap', gameBoyPlayer.handle.aBtnHandle.bind(gameBoyPlayer));\n    gameBoyPlayer.controller.bBtn.on('tap', gameBoyPlayer.handle.bBtnHandle.bind(gameBoyPlayer));\n\n    //x方向Btn点击\n    gameBoyPlayer.controller.rightBtn.on('tap', gameBoyPlayer.handle.xDirHandle);\n    gameBoyPlayer.controller.leftBtn.on('tap', gameBoyPlayer.handle.xDirHandle);\n\n    //y方向Btn点击\n    gameBoyPlayer.controller.topBtn.on('tap', function () {\n        return gameBoyPlayer.handle.yDirHandle.bind(gameBoyPlayer)(event, false, false);\n    });\n    gameBoyPlayer.controller.botBtn.on('tap', function () {\n        return gameBoyPlayer.handle.yDirHandle.bind(gameBoyPlayer)(event, true, false);\n    });\n\n    //y方向Btn长按\n    //安卓微信很难用\n    gameBoyPlayer.controller.topBtn.on('longTap', function () {\n        return gameBoyPlayer.handle.yDirHandle.bind(gameBoyPlayer)(event, false, true);\n    });\n    gameBoyPlayer.controller.botBtn.on('longTap', function () {\n        return gameBoyPlayer.handle.yDirHandle.bind(gameBoyPlayer)(event, true, true);\n    });\n    //长按后清除定时器\n    gameBoyPlayer.controller.topBtn.on('touchend', function () {\n        clearInterval(gameBoyPlayer.timer);\n    });\n    gameBoyPlayer.controller.botBtn.on('touchend', function () {\n        clearInterval(gameBoyPlayer.timer);\n    });\n\n    //点击音乐\n    function tapMusic() {\n        var $musicBtn = (0, _nZepto2.default)('#music-btn'),\n            $musicSolid = (0, _nZepto2.default)('.music-solid'),\n            $contentMusicBtn = (0, _nZepto2.default)('.content-music-btn');\n\n        $musicBtn.on('tap', function () {\n            (0, _nZepto2.default)(this).toggleClass('close-music');\n            $musicSolid.toggleClass('animated');\n\n            //关闭音乐\n        });\n\n        $contentMusicBtn.on('tap', function () {\n            (0, _nZepto2.default)(this).toggleClass('close-music');\n\n            //关闭音乐\n        });\n    }\n    tapMusic();\n\n    //\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "93b355e23b62b5ea9c9503324b32ea40.jpg";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvaW1hZ2VzL2RldGFpbC1wYWdlMS5qcGc/M2MwYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiOTNiMzU1ZTIzYjYyYjVlYTljOTUwMzMyNGIzMmVhNDAuanBnXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvaW1hZ2VzL2RldGFpbC1wYWdlMS5qcGdcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY3NzL3Jlc2V0LmNzcz9kMjdhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2Nzcy9yZXNldC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvY3NzL2luZGV4Lmxlc3M/YTdiYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9jc3MvaW5kZXgubGVzc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;/* Zepto v1.2.0 - zepto event ajax form ie - zeptojs.com/license */\r\n(function(global, factory) {\r\n    if(exports === 'object' && typeof module !== 'undefined')\r\n        module.exports = factory(global)\r\n    if (true)\r\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return factory(global) }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\r\n    else\r\n        factory(global)\r\n}( typeof window !== \"undefined\" ? window : this, function(window) {\r\n    var Zepto = (function() {\r\n        var undefined, key, $, classList, emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter, slice = emptyArray.slice,\r\n            document = window.document,\r\n            elementDisplay = {}, classCache = {},\r\n            cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 },\r\n            fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\r\n            singleTagRE = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\r\n            tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/ig,\r\n            rootNodeRE = /^(?:body|html)$/i,\r\n            capitalRE = /([A-Z])/g,\r\n\r\n            // special attributes that should be get/set via method calls\r\n            methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],\r\n\r\n            adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ],\r\n            table = document.createElement('table'),\r\n            tableRow = document.createElement('tr'),\r\n            containers = {\r\n                'tr': document.createElement('tbody'),\r\n                'tbody': table, 'thead': table, 'tfoot': table,\r\n                'td': tableRow, 'th': tableRow,\r\n                '*': document.createElement('div')\r\n            },\r\n            readyRE = /complete|loaded|interactive/,\r\n            simpleSelectorRE = /^[\\w-]*$/,\r\n            class2type = {},\r\n            toString = class2type.toString,\r\n            zepto = {},\r\n            camelize, uniq,\r\n            tempParent = document.createElement('div'),\r\n            propMap = {\r\n                'tabindex': 'tabIndex',\r\n                'readonly': 'readOnly',\r\n                'for': 'htmlFor',\r\n                'class': 'className',\r\n                'maxlength': 'maxLength',\r\n                'cellspacing': 'cellSpacing',\r\n                'cellpadding': 'cellPadding',\r\n                'rowspan': 'rowSpan',\r\n                'colspan': 'colSpan',\r\n                'usemap': 'useMap',\r\n                'frameborder': 'frameBorder',\r\n                'contenteditable': 'contentEditable'\r\n            },\r\n            isArray = Array.isArray ||\r\n                function(object){ return object instanceof Array }\r\n\r\n        zepto.matches = function(element, selector) {\r\n            if (!selector || !element || element.nodeType !== 1) return false\r\n            var matchesSelector = element.matches || element.webkitMatchesSelector ||\r\n                element.mozMatchesSelector || element.oMatchesSelector ||\r\n                element.matchesSelector\r\n            if (matchesSelector) return matchesSelector.call(element, selector)\r\n            // fall back to performing a selector:\r\n            var match, parent = element.parentNode, temp = !parent\r\n            if (temp) (parent = tempParent).appendChild(element)\r\n            match = ~zepto.qsa(parent, selector).indexOf(element)\r\n            temp && tempParent.removeChild(element)\r\n            return match\r\n        }\r\n\r\n        function type(obj) {\r\n            return obj == null ? String(obj) :\r\n            class2type[toString.call(obj)] || \"object\"\r\n        }\r\n\r\n        function isFunction(value) { return type(value) == \"function\" }\r\n        function isWindow(obj)     { return obj != null && obj == obj.window }\r\n        function isDocument(obj)   { return obj != null && obj.nodeType == obj.DOCUMENT_NODE }\r\n        function isObject(obj)     { return type(obj) == \"object\" }\r\n        function isPlainObject(obj) {\r\n            return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype\r\n        }\r\n\r\n        function likeArray(obj) {\r\n            var length = !!obj && 'length' in obj && obj.length,\r\n                type = $.type(obj)\r\n\r\n            return 'function' != type && !isWindow(obj) && (\r\n                    'array' == type || length === 0 ||\r\n                    (typeof length == 'number' && length > 0 && (length - 1) in obj)\r\n                )\r\n        }\r\n\r\n        function compact(array) { return filter.call(array, function(item){ return item != null }) }\r\n        function flatten(array) { return array.length > 0 ? $.fn.concat.apply([], array) : array }\r\n        camelize = function(str){ return str.replace(/-+(.)?/g, function(match, chr){ return chr ? chr.toUpperCase() : '' }) }\r\n        function dasherize(str) {\r\n            return str.replace(/::/g, '/')\r\n                .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n                .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n                .replace(/_/g, '-')\r\n                .toLowerCase()\r\n        }\r\n        uniq = function(array){ return filter.call(array, function(item, idx){ return array.indexOf(item) == idx }) }\r\n\r\n        function classRE(name) {\r\n            return name in classCache ?\r\n                classCache[name] : (classCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'))\r\n        }\r\n\r\n        function maybeAddPx(name, value) {\r\n            return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n        }\r\n\r\n        function defaultDisplay(nodeName) {\r\n            var element, display\r\n            if (!elementDisplay[nodeName]) {\r\n                element = document.createElement(nodeName)\r\n                document.body.appendChild(element)\r\n                display = getComputedStyle(element, '').getPropertyValue(\"display\")\r\n                element.parentNode.removeChild(element)\r\n                display == \"none\" && (display = \"block\")\r\n                elementDisplay[nodeName] = display\r\n            }\r\n            return elementDisplay[nodeName]\r\n        }\r\n\r\n        function children(element) {\r\n            return 'children' in element ?\r\n                slice.call(element.children) :\r\n                $.map(element.childNodes, function(node){ if (node.nodeType == 1) return node })\r\n        }\r\n\r\n        function Z(dom, selector) {\r\n            var i, len = dom ? dom.length : 0\r\n            for (i = 0; i < len; i++) this[i] = dom[i]\r\n            this.length = len\r\n            this.selector = selector || ''\r\n        }\r\n\r\n        // `$.zepto.fragment` takes a html string and an optional tag name\r\n        // to generate DOM nodes from the given html string.\r\n        // The generated DOM nodes are returned as an array.\r\n        // This function can be overridden in plugins for example to make\r\n        // it compatible with browsers that don't support the DOM fully.\r\n        zepto.fragment = function(html, name, properties) {\r\n            var dom, nodes, container\r\n\r\n            // A special case optimization for a single tag\r\n            if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1))\r\n\r\n            if (!dom) {\r\n                if (html.replace) html = html.replace(tagExpanderRE, \"<$1></$2>\")\r\n                if (name === undefined) name = fragmentRE.test(html) && RegExp.$1\r\n                if (!(name in containers)) name = '*'\r\n\r\n                container = containers[name]\r\n                container.innerHTML = '' + html\r\n                dom = $.each(slice.call(container.childNodes), function(){\r\n                    container.removeChild(this)\r\n                })\r\n            }\r\n\r\n            if (isPlainObject(properties)) {\r\n                nodes = $(dom)\r\n                $.each(properties, function(key, value) {\r\n                    if (methodAttributes.indexOf(key) > -1) nodes[key](value)\r\n                    else nodes.attr(key, value)\r\n                })\r\n            }\r\n\r\n            return dom\r\n        }\r\n\r\n        // `$.zepto.Z` swaps out the prototype of the given `dom` array\r\n        // of nodes with `$.fn` and thus supplying all the Zepto functions\r\n        // to the array. This method can be overridden in plugins.\r\n        zepto.Z = function(dom, selector) {\r\n            return new Z(dom, selector)\r\n        }\r\n\r\n        // `$.zepto.isZ` should return `true` if the given object is a Zepto\r\n        // collection. This method can be overridden in plugins.\r\n        zepto.isZ = function(object) {\r\n            return object instanceof zepto.Z\r\n        }\r\n\r\n        // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and\r\n        // takes a CSS selector and an optional context (and handles various\r\n        // special cases).\r\n        // This method can be overridden in plugins.\r\n        zepto.init = function(selector, context) {\r\n            var dom\r\n            // If nothing given, return an empty Zepto collection\r\n            if (!selector) return zepto.Z()\r\n            // Optimize for string selectors\r\n            else if (typeof selector == 'string') {\r\n                selector = selector.trim()\r\n                // If it's a html fragment, create nodes from it\r\n                // Note: In both Chrome 21 and Firefox 15, DOM error 12\r\n                // is thrown if the fragment doesn't begin with <\r\n                if (selector[0] == '<' && fragmentRE.test(selector))\r\n                    dom = zepto.fragment(selector, RegExp.$1, context), selector = null\r\n                // If there's a context, create a collection on that context first, and select\r\n                // nodes from there\r\n                else if (context !== undefined) return $(context).find(selector)\r\n                // If it's a CSS selector, use it to select nodes.\r\n                else dom = zepto.qsa(document, selector)\r\n            }\r\n            // If a function is given, call it when the DOM is ready\r\n            else if (isFunction(selector)) return $(document).ready(selector)\r\n            // If a Zepto collection is given, just return it\r\n            else if (zepto.isZ(selector)) return selector\r\n            else {\r\n                // normalize array if an array of nodes is given\r\n                if (isArray(selector)) dom = compact(selector)\r\n                // Wrap DOM nodes.\r\n                else if (isObject(selector))\r\n                    dom = [selector], selector = null\r\n                // If it's a html fragment, create nodes from it\r\n                else if (fragmentRE.test(selector))\r\n                    dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null\r\n                // If there's a context, create a collection on that context first, and select\r\n                // nodes from there\r\n                else if (context !== undefined) return $(context).find(selector)\r\n                // And last but no least, if it's a CSS selector, use it to select nodes.\r\n                else dom = zepto.qsa(document, selector)\r\n            }\r\n            // create a new Zepto collection from the nodes found\r\n            return zepto.Z(dom, selector)\r\n        }\r\n\r\n        // `$` will be the base `Zepto` object. When calling this\r\n        // function just call `$.zepto.init, which makes the implementation\r\n        // details of selecting nodes and creating Zepto collections\r\n        // patchable in plugins.\r\n        $ = function(selector, context){\r\n            return zepto.init(selector, context)\r\n        }\r\n\r\n        function extend(target, source, deep) {\r\n            for (key in source)\r\n                if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n                    if (isPlainObject(source[key]) && !isPlainObject(target[key]))\r\n                        target[key] = {}\r\n                    if (isArray(source[key]) && !isArray(target[key]))\r\n                        target[key] = []\r\n                    extend(target[key], source[key], deep)\r\n                }\r\n                else if (source[key] !== undefined) target[key] = source[key]\r\n        }\r\n\r\n        // Copy all but undefined properties from one or more\r\n        // objects to the `target` object.\r\n        $.extend = function(target){\r\n            var deep, args = slice.call(arguments, 1)\r\n            if (typeof target == 'boolean') {\r\n                deep = target\r\n                target = args.shift()\r\n            }\r\n            args.forEach(function(arg){ extend(target, arg, deep) })\r\n            return target\r\n        }\r\n\r\n        // `$.zepto.qsa` is Zepto's CSS selector implementation which\r\n        // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.\r\n        // This method can be overridden in plugins.\r\n        zepto.qsa = function(element, selector){\r\n            var found,\r\n                maybeID = selector[0] == '#',\r\n                maybeClass = !maybeID && selector[0] == '.',\r\n                nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked\r\n                isSimple = simpleSelectorRE.test(nameOnly)\r\n            return (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById\r\n                ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :\r\n                (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :\r\n                    slice.call(\r\n                        isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\r\n                            maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\r\n                                element.getElementsByTagName(selector) : // Or a tag\r\n                            element.querySelectorAll(selector) // Or it's not simple, and we need to query all\r\n                    )\r\n        }\r\n\r\n        function filtered(nodes, selector) {\r\n            return selector == null ? $(nodes) : $(nodes).filter(selector)\r\n        }\r\n\r\n        $.contains = document.documentElement.contains ?\r\n            function(parent, node) {\r\n                return parent !== node && parent.contains(node)\r\n            } :\r\n            function(parent, node) {\r\n                while (node && (node = node.parentNode))\r\n                    if (node === parent) return true\r\n                return false\r\n            }\r\n\r\n        function funcArg(context, arg, idx, payload) {\r\n            return isFunction(arg) ? arg.call(context, idx, payload) : arg\r\n        }\r\n\r\n        function setAttribute(node, name, value) {\r\n            value == null ? node.removeAttribute(name) : node.setAttribute(name, value)\r\n        }\r\n\r\n        // access className property while respecting SVGAnimatedString\r\n        function className(node, value){\r\n            var klass = node.className || '',\r\n                svg   = klass && klass.baseVal !== undefined\r\n\r\n            if (value === undefined) return svg ? klass.baseVal : klass\r\n            svg ? (klass.baseVal = value) : (node.className = value)\r\n        }\r\n\r\n        // \"true\"  => true\r\n        // \"false\" => false\r\n        // \"null\"  => null\r\n        // \"42\"    => 42\r\n        // \"42.5\"  => 42.5\r\n        // \"08\"    => \"08\"\r\n        // JSON    => parse if valid\r\n        // String  => self\r\n        function deserializeValue(value) {\r\n            try {\r\n                return value ?\r\n                value == \"true\" ||\r\n                ( value == \"false\" ? false :\r\n                    value == \"null\" ? null :\r\n                        +value + \"\" == value ? +value :\r\n                            /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\r\n                                value )\r\n                    : value\r\n            } catch(e) {\r\n                return value\r\n            }\r\n        }\r\n\r\n        $.type = type\r\n        $.isFunction = isFunction\r\n        $.isWindow = isWindow\r\n        $.isArray = isArray\r\n        $.isPlainObject = isPlainObject\r\n\r\n        $.isEmptyObject = function(obj) {\r\n            var name\r\n            for (name in obj) return false\r\n            return true\r\n        }\r\n\r\n        $.isNumeric = function(val) {\r\n            var num = Number(val), type = typeof val\r\n            return val != null && type != 'boolean' &&\r\n                (type != 'string' || val.length) &&\r\n                !isNaN(num) && isFinite(num) || false\r\n        }\r\n\r\n        $.inArray = function(elem, array, i){\r\n            return emptyArray.indexOf.call(array, elem, i)\r\n        }\r\n\r\n        $.camelCase = camelize\r\n        $.trim = function(str) {\r\n            return str == null ? \"\" : String.prototype.trim.call(str)\r\n        }\r\n\r\n        // plugin compatibility\r\n        $.uuid = 0\r\n        $.support = { }\r\n        $.expr = { }\r\n        $.noop = function() {}\r\n\r\n        $.map = function(elements, callback){\r\n            var value, values = [], i, key\r\n            if (likeArray(elements))\r\n                for (i = 0; i < elements.length; i++) {\r\n                    value = callback(elements[i], i)\r\n                    if (value != null) values.push(value)\r\n                }\r\n            else\r\n                for (key in elements) {\r\n                    value = callback(elements[key], key)\r\n                    if (value != null) values.push(value)\r\n                }\r\n            return flatten(values)\r\n        }\r\n\r\n        $.each = function(elements, callback){\r\n            var i, key\r\n            if (likeArray(elements)) {\r\n                for (i = 0; i < elements.length; i++)\r\n                    if (callback.call(elements[i], i, elements[i]) === false) return elements\r\n            } else {\r\n                for (key in elements)\r\n                    if (callback.call(elements[key], key, elements[key]) === false) return elements\r\n            }\r\n\r\n            return elements\r\n        }\r\n\r\n        $.grep = function(elements, callback){\r\n            return filter.call(elements, callback)\r\n        }\r\n\r\n        if (window.JSON) $.parseJSON = JSON.parse\r\n\r\n        // Populate the class2type map\r\n        $.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) {\r\n            class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase()\r\n        })\r\n\r\n        // Define methods that will be available on all\r\n        // Zepto collections\r\n        $.fn = {\r\n            constructor: zepto.Z,\r\n            length: 0,\r\n\r\n            // Because a collection acts like an array\r\n            // copy over these useful array functions.\r\n            forEach: emptyArray.forEach,\r\n            reduce: emptyArray.reduce,\r\n            push: emptyArray.push,\r\n            sort: emptyArray.sort,\r\n            splice: emptyArray.splice,\r\n            indexOf: emptyArray.indexOf,\r\n            concat: function(){\r\n                var i, value, args = []\r\n                for (i = 0; i < arguments.length; i++) {\r\n                    value = arguments[i]\r\n                    args[i] = zepto.isZ(value) ? value.toArray() : value\r\n                }\r\n                return concat.apply(zepto.isZ(this) ? this.toArray() : this, args)\r\n            },\r\n\r\n            // `map` and `slice` in the jQuery API work differently\r\n            // from their array counterparts\r\n            map: function(fn){\r\n                return $($.map(this, function(el, i){ return fn.call(el, i, el) }))\r\n            },\r\n            slice: function(){\r\n                return $(slice.apply(this, arguments))\r\n            },\r\n\r\n            ready: function(callback){\r\n                // need to check if document.body exists for IE as that browser reports\r\n                // document ready when it hasn't yet created the body element\r\n                if (readyRE.test(document.readyState) && document.body) callback($)\r\n                else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)\r\n                return this\r\n            },\r\n            get: function(idx){\r\n                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]\r\n            },\r\n            toArray: function(){ return this.get() },\r\n            size: function(){\r\n                return this.length\r\n            },\r\n            remove: function(){\r\n                return this.each(function(){\r\n                    if (this.parentNode != null)\r\n                        this.parentNode.removeChild(this)\r\n                })\r\n            },\r\n            each: function(callback){\r\n                emptyArray.every.call(this, function(el, idx){\r\n                    return callback.call(el, idx, el) !== false\r\n                })\r\n                return this\r\n            },\r\n            filter: function(selector){\r\n                if (isFunction(selector)) return this.not(this.not(selector))\r\n                return $(filter.call(this, function(element){\r\n                    return zepto.matches(element, selector)\r\n                }))\r\n            },\r\n            add: function(selector,context){\r\n                return $(uniq(this.concat($(selector,context))))\r\n            },\r\n            is: function(selector){\r\n                return this.length > 0 && zepto.matches(this[0], selector)\r\n            },\r\n            not: function(selector){\r\n                var nodes=[]\r\n                if (isFunction(selector) && selector.call !== undefined)\r\n                    this.each(function(idx){\r\n                        if (!selector.call(this,idx)) nodes.push(this)\r\n                    })\r\n                else {\r\n                    var excludes = typeof selector == 'string' ? this.filter(selector) :\r\n                        (likeArray(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)\r\n                    this.forEach(function(el){\r\n                        if (excludes.indexOf(el) < 0) nodes.push(el)\r\n                    })\r\n                }\r\n                return $(nodes)\r\n            },\r\n            has: function(selector){\r\n                return this.filter(function(){\r\n                    return isObject(selector) ?\r\n                        $.contains(this, selector) :\r\n                        $(this).find(selector).size()\r\n                })\r\n            },\r\n            eq: function(idx){\r\n                return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1)\r\n            },\r\n            first: function(){\r\n                var el = this[0]\r\n                return el && !isObject(el) ? el : $(el)\r\n            },\r\n            last: function(){\r\n                var el = this[this.length - 1]\r\n                return el && !isObject(el) ? el : $(el)\r\n            },\r\n            find: function(selector){\r\n                var result, $this = this\r\n                if (!selector) result = $()\r\n                else if (typeof selector == 'object')\r\n                    result = $(selector).filter(function(){\r\n                        var node = this\r\n                        return emptyArray.some.call($this, function(parent){\r\n                            return $.contains(parent, node)\r\n                        })\r\n                    })\r\n                else if (this.length == 1) result = $(zepto.qsa(this[0], selector))\r\n                else result = this.map(function(){ return zepto.qsa(this, selector) })\r\n                return result\r\n            },\r\n            closest: function(selector, context){\r\n                var nodes = [], collection = typeof selector == 'object' && $(selector)\r\n                this.each(function(_, node){\r\n                    while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector)))\r\n                        node = node !== context && !isDocument(node) && node.parentNode\r\n                    if (node && nodes.indexOf(node) < 0) nodes.push(node)\r\n                })\r\n                return $(nodes)\r\n            },\r\n            parents: function(selector){\r\n                var ancestors = [], nodes = this\r\n                while (nodes.length > 0)\r\n                    nodes = $.map(nodes, function(node){\r\n                        if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {\r\n                            ancestors.push(node)\r\n                            return node\r\n                        }\r\n                    })\r\n                return filtered(ancestors, selector)\r\n            },\r\n            parent: function(selector){\r\n                return filtered(uniq(this.pluck('parentNode')), selector)\r\n            },\r\n            children: function(selector){\r\n                return filtered(this.map(function(){ return children(this) }), selector)\r\n            },\r\n            contents: function() {\r\n                return this.map(function() { return this.contentDocument || slice.call(this.childNodes) })\r\n            },\r\n            siblings: function(selector){\r\n                return filtered(this.map(function(i, el){\r\n                    return filter.call(children(el.parentNode), function(child){ return child!==el })\r\n                }), selector)\r\n            },\r\n            empty: function(){\r\n                return this.each(function(){ this.innerHTML = '' })\r\n            },\r\n            // `pluck` is borrowed from Prototype.js\r\n            pluck: function(property){\r\n                return $.map(this, function(el){ return el[property] })\r\n            },\r\n            show: function(){\r\n                return this.each(function(){\r\n                    this.style.display == \"none\" && (this.style.display = '')\r\n                    if (getComputedStyle(this, '').getPropertyValue(\"display\") == \"none\")\r\n                        this.style.display = defaultDisplay(this.nodeName)\r\n                })\r\n            },\r\n            replaceWith: function(newContent){\r\n                return this.before(newContent).remove()\r\n            },\r\n            wrap: function(structure){\r\n                var func = isFunction(structure)\r\n                if (this[0] && !func)\r\n                    var dom   = $(structure).get(0),\r\n                        clone = dom.parentNode || this.length > 1\r\n\r\n                return this.each(function(index){\r\n                    $(this).wrapAll(\r\n                        func ? structure.call(this, index) :\r\n                            clone ? dom.cloneNode(true) : dom\r\n                    )\r\n                })\r\n            },\r\n            wrapAll: function(structure){\r\n                if (this[0]) {\r\n                    $(this[0]).before(structure = $(structure))\r\n                    var children\r\n                    // drill down to the inmost element\r\n                    while ((children = structure.children()).length) structure = children.first()\r\n                    $(structure).append(this)\r\n                }\r\n                return this\r\n            },\r\n            wrapInner: function(structure){\r\n                var func = isFunction(structure)\r\n                return this.each(function(index){\r\n                    var self = $(this), contents = self.contents(),\r\n                        dom  = func ? structure.call(this, index) : structure\r\n                    contents.length ? contents.wrapAll(dom) : self.append(dom)\r\n                })\r\n            },\r\n            unwrap: function(){\r\n                this.parent().each(function(){\r\n                    $(this).replaceWith($(this).children())\r\n                })\r\n                return this\r\n            },\r\n            clone: function(){\r\n                return this.map(function(){ return this.cloneNode(true) })\r\n            },\r\n            hide: function(){\r\n                return this.css(\"display\", \"none\")\r\n            },\r\n            toggle: function(setting){\r\n                return this.each(function(){\r\n                    var el = $(this)\r\n                        ;(setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show() : el.hide()\r\n                })\r\n            },\r\n            prev: function(selector){ return $(this.pluck('previousElementSibling')).filter(selector || '*') },\r\n            next: function(selector){ return $(this.pluck('nextElementSibling')).filter(selector || '*') },\r\n            html: function(html){\r\n                return 0 in arguments ?\r\n                    this.each(function(idx){\r\n                        var originHtml = this.innerHTML\r\n                        $(this).empty().append( funcArg(this, html, idx, originHtml) )\r\n                    }) :\r\n                    (0 in this ? this[0].innerHTML : null)\r\n            },\r\n            text: function(text){\r\n                return 0 in arguments ?\r\n                    this.each(function(idx){\r\n                        var newText = funcArg(this, text, idx, this.textContent)\r\n                        this.textContent = newText == null ? '' : ''+newText\r\n                    }) :\r\n                    (0 in this ? this.pluck('textContent').join(\"\") : null)\r\n            },\r\n            attr: function(name, value){\r\n                var result\r\n                return (typeof name == 'string' && !(1 in arguments)) ?\r\n                    (0 in this && this[0].nodeType == 1 && (result = this[0].getAttribute(name)) != null ? result : undefined) :\r\n                    this.each(function(idx){\r\n                        if (this.nodeType !== 1) return\r\n                        if (isObject(name)) for (key in name) setAttribute(this, key, name[key])\r\n                        else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)))\r\n                    })\r\n            },\r\n            removeAttr: function(name){\r\n                return this.each(function(){ this.nodeType === 1 && name.split(' ').forEach(function(attribute){\r\n                    setAttribute(this, attribute)\r\n                }, this)})\r\n            },\r\n            prop: function(name, value){\r\n                name = propMap[name] || name\r\n                return (1 in arguments) ?\r\n                    this.each(function(idx){\r\n                        this[name] = funcArg(this, value, idx, this[name])\r\n                    }) :\r\n                    (this[0] && this[0][name])\r\n            },\r\n            removeProp: function(name){\r\n                name = propMap[name] || name\r\n                return this.each(function(){ delete this[name] })\r\n            },\r\n            data: function(name, value){\r\n                var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase()\r\n\r\n                var data = (1 in arguments) ?\r\n                    this.attr(attrName, value) :\r\n                    this.attr(attrName)\r\n\r\n                return data !== null ? deserializeValue(data) : undefined\r\n            },\r\n            val: function(value){\r\n                if (0 in arguments) {\r\n                    if (value == null) value = \"\"\r\n                    return this.each(function(idx){\r\n                        this.value = funcArg(this, value, idx, this.value)\r\n                    })\r\n                } else {\r\n                    return this[0] && (this[0].multiple ?\r\n                            $(this[0]).find('option').filter(function(){ return this.selected }).pluck('value') :\r\n                            this[0].value)\r\n                }\r\n            },\r\n            offset: function(coordinates){\r\n                if (coordinates) return this.each(function(index){\r\n                    var $this = $(this),\r\n                        coords = funcArg(this, coordinates, index, $this.offset()),\r\n                        parentOffset = $this.offsetParent().offset(),\r\n                        props = {\r\n                            top:  coords.top  - parentOffset.top,\r\n                            left: coords.left - parentOffset.left\r\n                        }\r\n\r\n                    if ($this.css('position') == 'static') props['position'] = 'relative'\r\n                    $this.css(props)\r\n                })\r\n                if (!this.length) return null\r\n                if (document.documentElement !== this[0] && !$.contains(document.documentElement, this[0]))\r\n                    return {top: 0, left: 0}\r\n                var obj = this[0].getBoundingClientRect()\r\n                return {\r\n                    left: obj.left + window.pageXOffset,\r\n                    top: obj.top + window.pageYOffset,\r\n                    width: Math.round(obj.width),\r\n                    height: Math.round(obj.height)\r\n                }\r\n            },\r\n            css: function(property, value){\r\n                if (arguments.length < 2) {\r\n                    var element = this[0]\r\n                    if (typeof property == 'string') {\r\n                        if (!element) return\r\n                        return element.style[camelize(property)] || getComputedStyle(element, '').getPropertyValue(property)\r\n                    } else if (isArray(property)) {\r\n                        if (!element) return\r\n                        var props = {}\r\n                        var computedStyle = getComputedStyle(element, '')\r\n                        $.each(property, function(_, prop){\r\n                            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))\r\n                        })\r\n                        return props\r\n                    }\r\n                }\r\n\r\n                var css = ''\r\n                if (type(property) == 'string') {\r\n                    if (!value && value !== 0)\r\n                        this.each(function(){ this.style.removeProperty(dasherize(property)) })\r\n                    else\r\n                        css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n                } else {\r\n                    for (key in property)\r\n                        if (!property[key] && property[key] !== 0)\r\n                            this.each(function(){ this.style.removeProperty(dasherize(key)) })\r\n                        else\r\n                            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n\r\n                return this.each(function(){ this.style.cssText += ';' + css })\r\n            },\r\n            index: function(element){\r\n                return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0])\r\n            },\r\n            hasClass: function(name){\r\n                if (!name) return false\r\n                return emptyArray.some.call(this, function(el){\r\n                    return this.test(className(el))\r\n                }, classRE(name))\r\n            },\r\n            addClass: function(name){\r\n                if (!name) return this\r\n                return this.each(function(idx){\r\n                    if (!('className' in this)) return\r\n                    classList = []\r\n                    var cls = className(this), newName = funcArg(this, name, idx, cls)\r\n                    newName.split(/\\s+/g).forEach(function(klass){\r\n                        if (!$(this).hasClass(klass)) classList.push(klass)\r\n                    }, this)\r\n                    classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"))\r\n                })\r\n            },\r\n            removeClass: function(name){\r\n                return this.each(function(idx){\r\n                    if (!('className' in this)) return\r\n                    if (name === undefined) return className(this, '')\r\n                    classList = className(this)\r\n                    funcArg(this, name, idx, classList).split(/\\s+/g).forEach(function(klass){\r\n                        classList = classList.replace(classRE(klass), \" \")\r\n                    })\r\n                    className(this, classList.trim())\r\n                })\r\n            },\r\n            toggleClass: function(name, when){\r\n                if (!name) return this\r\n                return this.each(function(idx){\r\n                    var $this = $(this), names = funcArg(this, name, idx, className(this))\r\n                    names.split(/\\s+/g).forEach(function(klass){\r\n                        (when === undefined ? !$this.hasClass(klass) : when) ?\r\n                            $this.addClass(klass) : $this.removeClass(klass)\r\n                    })\r\n                })\r\n            },\r\n            scrollTop: function(value){\r\n                if (!this.length) return\r\n                var hasScrollTop = 'scrollTop' in this[0]\r\n                if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset\r\n                return this.each(hasScrollTop ?\r\n                    function(){ this.scrollTop = value } :\r\n                    function(){ this.scrollTo(this.scrollX, value) })\r\n            },\r\n            scrollLeft: function(value){\r\n                if (!this.length) return\r\n                var hasScrollLeft = 'scrollLeft' in this[0]\r\n                if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset\r\n                return this.each(hasScrollLeft ?\r\n                    function(){ this.scrollLeft = value } :\r\n                    function(){ this.scrollTo(value, this.scrollY) })\r\n            },\r\n            position: function() {\r\n                if (!this.length) return\r\n\r\n                var elem = this[0],\r\n                    // Get *real* offsetParent\r\n                    offsetParent = this.offsetParent(),\r\n                    // Get correct offsets\r\n                    offset       = this.offset(),\r\n                    parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset()\r\n\r\n                // Subtract element margins\r\n                // note: when an element has margin: auto the offsetLeft and marginLeft\r\n                // are the same in Safari causing offset.left to incorrectly be 0\r\n                offset.top  -= parseFloat( $(elem).css('margin-top') ) || 0\r\n                offset.left -= parseFloat( $(elem).css('margin-left') ) || 0\r\n\r\n                // Add offsetParent borders\r\n                parentOffset.top  += parseFloat( $(offsetParent[0]).css('border-top-width') ) || 0\r\n                parentOffset.left += parseFloat( $(offsetParent[0]).css('border-left-width') ) || 0\r\n\r\n                // Subtract the two offsets\r\n                return {\r\n                    top:  offset.top  - parentOffset.top,\r\n                    left: offset.left - parentOffset.left\r\n                }\r\n            },\r\n            offsetParent: function() {\r\n                return this.map(function(){\r\n                    var parent = this.offsetParent || document.body\r\n                    while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css(\"position\") == \"static\")\r\n                        parent = parent.offsetParent\r\n                    return parent\r\n                })\r\n            }\r\n        }\r\n\r\n        // for now\r\n        $.fn.detach = $.fn.remove\r\n\r\n        // Generate the `width` and `height` functions\r\n        ;['width', 'height'].forEach(function(dimension){\r\n            var dimensionProperty =\r\n                dimension.replace(/./, function(m){ return m[0].toUpperCase() })\r\n\r\n            $.fn[dimension] = function(value){\r\n                var offset, el = this[0]\r\n                if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] :\r\n                    isDocument(el) ? el.documentElement['scroll' + dimensionProperty] :\r\n                    (offset = this.offset()) && offset[dimension]\r\n                else return this.each(function(idx){\r\n                    el = $(this)\r\n                    el.css(dimension, funcArg(this, value, idx, el[dimension]()))\r\n                })\r\n            }\r\n        })\r\n\r\n        function traverseNode(node, fun) {\r\n            fun(node)\r\n            for (var i = 0, len = node.childNodes.length; i < len; i++)\r\n                traverseNode(node.childNodes[i], fun)\r\n        }\r\n\r\n        // Generate the `after`, `prepend`, `before`, `append`,\r\n        // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.\r\n        adjacencyOperators.forEach(function(operator, operatorIndex) {\r\n            var inside = operatorIndex % 2 //=> prepend, append\r\n\r\n            $.fn[operator] = function(){\r\n                // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings\r\n                var argType, nodes = $.map(arguments, function(arg) {\r\n                        var arr = []\r\n                        argType = type(arg)\r\n                        if (argType == \"array\") {\r\n                            arg.forEach(function(el) {\r\n                                if (el.nodeType !== undefined) return arr.push(el)\r\n                                else if ($.zepto.isZ(el)) return arr = arr.concat(el.get())\r\n                                arr = arr.concat(zepto.fragment(el))\r\n                            })\r\n                            return arr\r\n                        }\r\n                        return argType == \"object\" || arg == null ?\r\n                            arg : zepto.fragment(arg)\r\n                    }),\r\n                    parent, copyByClone = this.length > 1\r\n                if (nodes.length < 1) return this\r\n\r\n                return this.each(function(_, target){\r\n                    parent = inside ? target : target.parentNode\r\n\r\n                    // convert all methods to a \"before\" operation\r\n                    target = operatorIndex == 0 ? target.nextSibling :\r\n                        operatorIndex == 1 ? target.firstChild :\r\n                            operatorIndex == 2 ? target :\r\n                                null\r\n\r\n                    var parentInDocument = $.contains(document.documentElement, parent)\r\n\r\n                    nodes.forEach(function(node){\r\n                        if (copyByClone) node = node.cloneNode(true)\r\n                        else if (!parent) return $(node).remove()\r\n\r\n                        parent.insertBefore(node, target)\r\n                        if (parentInDocument) traverseNode(node, function(el){\r\n                            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' &&\r\n                                (!el.type || el.type === 'text/javascript') && !el.src){\r\n                                var target = el.ownerDocument ? el.ownerDocument.defaultView : window\r\n                                target['eval'].call(target, el.innerHTML)\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n            }\r\n\r\n            // after    => insertAfter\r\n            // prepend  => prependTo\r\n            // before   => insertBefore\r\n            // append   => appendTo\r\n            $.fn[inside ? operator+'To' : 'insert'+(operatorIndex ? 'Before' : 'After')] = function(html){\r\n                $(html)[operator](this)\r\n                return this\r\n            }\r\n        })\r\n\r\n        zepto.Z.prototype = Z.prototype = $.fn\r\n\r\n        // Export internal API functions in the `$.zepto` namespace\r\n        zepto.uniq = uniq\r\n        zepto.deserializeValue = deserializeValue\r\n        $.zepto = zepto\r\n\r\n        return $\r\n    })()\r\n\r\n    window.Zepto = Zepto\r\n    window.$ === undefined && (window.$ = Zepto)\r\n\r\n    ;(function($){\r\n        var _zid = 1, undefined,\r\n            slice = Array.prototype.slice,\r\n            isFunction = $.isFunction,\r\n            isString = function(obj){ return typeof obj == 'string' },\r\n            handlers = {},\r\n            specialEvents={},\r\n            focusinSupported = 'onfocusin' in window,\r\n            focus = { focus: 'focusin', blur: 'focusout' },\r\n            hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' }\r\n\r\n        specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents'\r\n\r\n        function zid(element) {\r\n            return element._zid || (element._zid = _zid++)\r\n        }\r\n        function findHandlers(element, event, fn, selector) {\r\n            event = parse(event)\r\n            if (event.ns) var matcher = matcherFor(event.ns)\r\n            return (handlers[zid(element)] || []).filter(function(handler) {\r\n                return handler\r\n                    && (!event.e  || handler.e == event.e)\r\n                    && (!event.ns || matcher.test(handler.ns))\r\n                    && (!fn       || zid(handler.fn) === zid(fn))\r\n                    && (!selector || handler.sel == selector)\r\n            })\r\n        }\r\n        function parse(event) {\r\n            var parts = ('' + event).split('.')\r\n            return {e: parts[0], ns: parts.slice(1).sort().join(' ')}\r\n        }\r\n        function matcherFor(ns) {\r\n            return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)')\r\n        }\r\n\r\n        function eventCapture(handler, captureSetting) {\r\n            return handler.del &&\r\n                (!focusinSupported && (handler.e in focus)) ||\r\n                !!captureSetting\r\n        }\r\n\r\n        function realEvent(type) {\r\n            return hover[type] || (focusinSupported && focus[type]) || type\r\n        }\r\n\r\n        function add(element, events, fn, data, selector, delegator, capture){\r\n            var id = zid(element), set = (handlers[id] || (handlers[id] = []))\r\n            events.split(/\\s/).forEach(function(event){\r\n                if (event == 'ready') return $(document).ready(fn)\r\n                var handler   = parse(event)\r\n                handler.fn    = fn\r\n                handler.sel   = selector\r\n                // emulate mouseenter, mouseleave\r\n                if (handler.e in hover) fn = function(e){\r\n                    var related = e.relatedTarget\r\n                    if (!related || (related !== this && !$.contains(this, related)))\r\n                        return handler.fn.apply(this, arguments)\r\n                }\r\n                handler.del   = delegator\r\n                var callback  = delegator || fn\r\n                handler.proxy = function(e){\r\n                    e = compatible(e)\r\n                    if (e.isImmediatePropagationStopped()) return\r\n                    e.data = data\r\n                    var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args))\r\n                    if (result === false) e.preventDefault(), e.stopPropagation()\r\n                    return result\r\n                }\r\n                handler.i = set.length\r\n                set.push(handler)\r\n                if ('addEventListener' in element)\r\n                    element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))\r\n            })\r\n        }\r\n        function remove(element, events, fn, selector, capture){\r\n            var id = zid(element)\r\n                ;(events || '').split(/\\s/).forEach(function(event){\r\n                findHandlers(element, event, fn, selector).forEach(function(handler){\r\n                    delete handlers[id][handler.i]\r\n                    if ('removeEventListener' in element)\r\n                        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))\r\n                })\r\n            })\r\n        }\r\n\r\n        $.event = { add: add, remove: remove }\r\n\r\n        $.proxy = function(fn, context) {\r\n            var args = (2 in arguments) && slice.call(arguments, 2)\r\n            if (isFunction(fn)) {\r\n                var proxyFn = function(){ return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments) }\r\n                proxyFn._zid = zid(fn)\r\n                return proxyFn\r\n            } else if (isString(context)) {\r\n                if (args) {\r\n                    args.unshift(fn[context], fn)\r\n                    return $.proxy.apply(null, args)\r\n                } else {\r\n                    return $.proxy(fn[context], fn)\r\n                }\r\n            } else {\r\n                throw new TypeError(\"expected function\")\r\n            }\r\n        }\r\n\r\n        $.fn.bind = function(event, data, callback){\r\n            return this.on(event, data, callback)\r\n        }\r\n        $.fn.unbind = function(event, callback){\r\n            return this.off(event, callback)\r\n        }\r\n        $.fn.one = function(event, selector, data, callback){\r\n            return this.on(event, selector, data, callback, 1)\r\n        }\r\n\r\n        var returnTrue = function(){return true},\r\n            returnFalse = function(){return false},\r\n            ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/,\r\n            eventMethods = {\r\n                preventDefault: 'isDefaultPrevented',\r\n                stopImmediatePropagation: 'isImmediatePropagationStopped',\r\n                stopPropagation: 'isPropagationStopped'\r\n            }\r\n\r\n        function compatible(event, source) {\r\n            if (source || !event.isDefaultPrevented) {\r\n                source || (source = event)\r\n\r\n                $.each(eventMethods, function(name, predicate) {\r\n                    var sourceMethod = source[name]\r\n                    event[name] = function(){\r\n                        this[predicate] = returnTrue\r\n                        return sourceMethod && sourceMethod.apply(source, arguments)\r\n                    }\r\n                    event[predicate] = returnFalse\r\n                })\r\n\r\n                event.timeStamp || (event.timeStamp = Date.now())\r\n\r\n                if (source.defaultPrevented !== undefined ? source.defaultPrevented :\r\n                        'returnValue' in source ? source.returnValue === false :\r\n                        source.getPreventDefault && source.getPreventDefault())\r\n                    event.isDefaultPrevented = returnTrue\r\n            }\r\n            return event\r\n        }\r\n\r\n        function createProxy(event) {\r\n            var key, proxy = { originalEvent: event }\r\n            for (key in event)\r\n                if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key]\r\n\r\n            return compatible(proxy, event)\r\n        }\r\n\r\n        $.fn.delegate = function(selector, event, callback){\r\n            return this.on(event, selector, callback)\r\n        }\r\n        $.fn.undelegate = function(selector, event, callback){\r\n            return this.off(event, selector, callback)\r\n        }\r\n\r\n        $.fn.live = function(event, callback){\r\n            $(document.body).delegate(this.selector, event, callback)\r\n            return this\r\n        }\r\n        $.fn.die = function(event, callback){\r\n            $(document.body).undelegate(this.selector, event, callback)\r\n            return this\r\n        }\r\n\r\n        $.fn.on = function(event, selector, data, callback, one){\r\n            var autoRemove, delegator, $this = this\r\n            if (event && !isString(event)) {\r\n                $.each(event, function(type, fn){\r\n                    $this.on(type, selector, data, fn, one)\r\n                })\r\n                return $this\r\n            }\r\n\r\n            if (!isString(selector) && !isFunction(callback) && callback !== false)\r\n                callback = data, data = selector, selector = undefined\r\n            if (callback === undefined || data === false)\r\n                callback = data, data = undefined\r\n\r\n            if (callback === false) callback = returnFalse\r\n\r\n            return $this.each(function(_, element){\r\n                if (one) autoRemove = function(e){\r\n                    remove(element, e.type, callback)\r\n                    return callback.apply(this, arguments)\r\n                }\r\n\r\n                if (selector) delegator = function(e){\r\n                    var evt, match = $(e.target).closest(selector, element).get(0)\r\n                    if (match && match !== element) {\r\n                        evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})\r\n                        return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)))\r\n                    }\r\n                }\r\n\r\n                add(element, event, callback, data, selector, delegator || autoRemove)\r\n            })\r\n        }\r\n        $.fn.off = function(event, selector, callback){\r\n            var $this = this\r\n            if (event && !isString(event)) {\r\n                $.each(event, function(type, fn){\r\n                    $this.off(type, selector, fn)\r\n                })\r\n                return $this\r\n            }\r\n\r\n            if (!isString(selector) && !isFunction(callback) && callback !== false)\r\n                callback = selector, selector = undefined\r\n\r\n            if (callback === false) callback = returnFalse\r\n\r\n            return $this.each(function(){\r\n                remove(this, event, callback, selector)\r\n            })\r\n        }\r\n\r\n        $.fn.trigger = function(event, args){\r\n            event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event)\r\n            event._args = args\r\n            return this.each(function(){\r\n                // handle focus(), blur() by calling them directly\r\n                if (event.type in focus && typeof this[event.type] == \"function\") this[event.type]()\r\n                // items in the collection might not be DOM elements\r\n                else if ('dispatchEvent' in this) this.dispatchEvent(event)\r\n                else $(this).triggerHandler(event, args)\r\n            })\r\n        }\r\n\r\n        // triggers event handlers on current element just as if an event occurred,\r\n        // doesn't trigger an actual event, doesn't bubble\r\n        $.fn.triggerHandler = function(event, args){\r\n            var e, result\r\n            this.each(function(i, element){\r\n                e = createProxy(isString(event) ? $.Event(event) : event)\r\n                e._args = args\r\n                e.target = element\r\n                $.each(findHandlers(element, event.type || event), function(i, handler){\r\n                    result = handler.proxy(e)\r\n                    if (e.isImmediatePropagationStopped()) return false\r\n                })\r\n            })\r\n            return result\r\n        }\r\n\r\n        // shortcut methods for `.bind(event, fn)` for each event type\r\n        ;('focusin focusout focus blur load resize scroll unload click dblclick '+\r\n        'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '+\r\n        'change select keydown keypress keyup error').split(' ').forEach(function(event) {\r\n            $.fn[event] = function(callback) {\r\n                return (0 in arguments) ?\r\n                    this.bind(event, callback) :\r\n                    this.trigger(event)\r\n            }\r\n        })\r\n\r\n        $.Event = function(type, props) {\r\n            if (!isString(type)) props = type, type = props.type\r\n            var event = document.createEvent(specialEvents[type] || 'Events'), bubbles = true\r\n            if (props) for (var name in props) (name == 'bubbles') ? (bubbles = !!props[name]) : (event[name] = props[name])\r\n            event.initEvent(type, bubbles, true)\r\n            return compatible(event)\r\n        }\r\n\r\n    })(Zepto)\r\n\r\n    ;(function($){\r\n        var jsonpID = +new Date(),\r\n            document = window.document,\r\n            key,\r\n            name,\r\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n            xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n            jsonType = 'application/json',\r\n            htmlType = 'text/html',\r\n            blankRE = /^\\s*$/,\r\n            originAnchor = document.createElement('a')\r\n\r\n        originAnchor.href = window.location.href\r\n\r\n        // trigger a custom event and return false if it was cancelled\r\n        function triggerAndReturn(context, eventName, data) {\r\n            var event = $.Event(eventName)\r\n            $(context).trigger(event, data)\r\n            return !event.isDefaultPrevented()\r\n        }\r\n\r\n        // trigger an Ajax \"global\" event\r\n        function triggerGlobal(settings, context, eventName, data) {\r\n            if (settings.global) return triggerAndReturn(context || document, eventName, data)\r\n        }\r\n\r\n        // Number of active Ajax requests\r\n        $.active = 0\r\n\r\n        function ajaxStart(settings) {\r\n            if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')\r\n        }\r\n        function ajaxStop(settings) {\r\n            if (settings.global && !(--$.active)) triggerGlobal(settings, null, 'ajaxStop')\r\n        }\r\n\r\n        // triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable\r\n        function ajaxBeforeSend(xhr, settings) {\r\n            var context = settings.context\r\n            if (settings.beforeSend.call(context, xhr, settings) === false ||\r\n                triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false)\r\n                return false\r\n\r\n            triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])\r\n        }\r\n        function ajaxSuccess(data, xhr, settings, deferred) {\r\n            var context = settings.context, status = 'success'\r\n            settings.success.call(context, data, status, xhr)\r\n            if (deferred) deferred.resolveWith(context, [data, status, xhr])\r\n            triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])\r\n            ajaxComplete(status, xhr, settings)\r\n        }\r\n        // type: \"timeout\", \"error\", \"abort\", \"parsererror\"\r\n        function ajaxError(error, type, xhr, settings, deferred) {\r\n            var context = settings.context\r\n            settings.error.call(context, xhr, type, error)\r\n            if (deferred) deferred.rejectWith(context, [xhr, type, error])\r\n            triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type])\r\n            ajaxComplete(type, xhr, settings)\r\n        }\r\n        // status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"\r\n        function ajaxComplete(status, xhr, settings) {\r\n            var context = settings.context\r\n            settings.complete.call(context, xhr, status)\r\n            triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])\r\n            ajaxStop(settings)\r\n        }\r\n\r\n        function ajaxDataFilter(data, type, settings) {\r\n            if (settings.dataFilter == empty) return data\r\n            var context = settings.context\r\n            return settings.dataFilter.call(context, data, type)\r\n        }\r\n\r\n        // Empty function, used as default callback\r\n        function empty() {}\r\n\r\n        $.ajaxJSONP = function(options, deferred){\r\n            if (!('type' in options)) return $.ajax(options)\r\n\r\n            var _callbackName = options.jsonpCallback,\r\n                callbackName = ($.isFunction(_callbackName) ?\r\n                        _callbackName() : _callbackName) || ('Zepto' + (jsonpID++)),\r\n                script = document.createElement('script'),\r\n                originalCallback = window[callbackName],\r\n                responseData,\r\n                abort = function(errorType) {\r\n                    $(script).triggerHandler('error', errorType || 'abort')\r\n                },\r\n                xhr = { abort: abort }, abortTimeout\r\n\r\n            if (deferred) deferred.promise(xhr)\r\n\r\n            $(script).on('load error', function(e, errorType){\r\n                clearTimeout(abortTimeout)\r\n                $(script).off().remove()\r\n\r\n                if (e.type == 'error' || !responseData) {\r\n                    ajaxError(null, errorType || 'error', xhr, options, deferred)\r\n                } else {\r\n                    ajaxSuccess(responseData[0], xhr, options, deferred)\r\n                }\r\n\r\n                window[callbackName] = originalCallback\r\n                if (responseData && $.isFunction(originalCallback))\r\n                    originalCallback(responseData[0])\r\n\r\n                originalCallback = responseData = undefined\r\n            })\r\n\r\n            if (ajaxBeforeSend(xhr, options) === false) {\r\n                abort('abort')\r\n                return xhr\r\n            }\r\n\r\n            window[callbackName] = function(){\r\n                responseData = arguments\r\n            }\r\n\r\n            script.src = options.url.replace(/\\?(.+)=\\?/, '?$1=' + callbackName)\r\n            document.head.appendChild(script)\r\n\r\n            if (options.timeout > 0) abortTimeout = setTimeout(function(){\r\n                abort('timeout')\r\n            }, options.timeout)\r\n\r\n            return xhr\r\n        }\r\n\r\n        $.ajaxSettings = {\r\n            // Default type of request\r\n            type: 'GET',\r\n            // Callback that is executed before request\r\n            beforeSend: empty,\r\n            // Callback that is executed if the request succeeds\r\n            success: empty,\r\n            // Callback that is executed the the server drops error\r\n            error: empty,\r\n            // Callback that is executed on request complete (both: error and success)\r\n            complete: empty,\r\n            // The context for the callbacks\r\n            context: null,\r\n            // Whether to trigger \"global\" Ajax events\r\n            global: true,\r\n            // Transport\r\n            xhr: function () {\r\n                return new window.XMLHttpRequest()\r\n            },\r\n            // MIME types mapping\r\n            // IIS returns Javascript as \"application/x-javascript\"\r\n            accepts: {\r\n                script: 'text/javascript, application/javascript, application/x-javascript',\r\n                json:   jsonType,\r\n                xml:    'application/xml, text/xml',\r\n                html:   htmlType,\r\n                text:   'text/plain'\r\n            },\r\n            // Whether the request is to another domain\r\n            crossDomain: false,\r\n            // Default timeout\r\n            timeout: 0,\r\n            // Whether data should be serialized to string\r\n            processData: true,\r\n            // Whether the browser should be allowed to cache GET responses\r\n            cache: true,\r\n            //Used to handle the raw response data of XMLHttpRequest.\r\n            //This is a pre-filtering function to sanitize the response.\r\n            //The sanitized response should be returned\r\n            dataFilter: empty\r\n        }\r\n\r\n        function mimeToDataType(mime) {\r\n            if (mime) mime = mime.split(';', 2)[0]\r\n            return mime && ( mime == htmlType ? 'html' :\r\n                    mime == jsonType ? 'json' :\r\n                        scriptTypeRE.test(mime) ? 'script' :\r\n                        xmlTypeRE.test(mime) && 'xml' ) || 'text'\r\n        }\r\n\r\n        function appendQuery(url, query) {\r\n            if (query == '') return url\r\n            return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n        }\r\n\r\n        // serialize payload and append it to the URL for GET requests\r\n        function serializeData(options) {\r\n            if (options.processData && options.data && $.type(options.data) != \"string\")\r\n                options.data = $.param(options.data, options.traditional)\r\n            if (options.data && (!options.type || options.type.toUpperCase() == 'GET' || 'jsonp' == options.dataType))\r\n                options.url = appendQuery(options.url, options.data), options.data = undefined\r\n        }\r\n\r\n        $.ajax = function(options){\r\n            var settings = $.extend({}, options || {}),\r\n                deferred = $.Deferred && $.Deferred(),\r\n                urlAnchor, hashIndex\r\n            for (key in $.ajaxSettings) if (settings[key] === undefined) settings[key] = $.ajaxSettings[key]\r\n\r\n            ajaxStart(settings)\r\n\r\n            if (!settings.crossDomain) {\r\n                urlAnchor = document.createElement('a')\r\n                urlAnchor.href = settings.url\r\n                // cleans up URL for .href (IE only), see https://github.com/madrobby/zepto/pull/1049\r\n                urlAnchor.href = urlAnchor.href\r\n                settings.crossDomain = (originAnchor.protocol + '//' + originAnchor.host) !== (urlAnchor.protocol + '//' + urlAnchor.host)\r\n            }\r\n\r\n            if (!settings.url) settings.url = window.location.toString()\r\n            if ((hashIndex = settings.url.indexOf('#')) > -1) settings.url = settings.url.slice(0, hashIndex)\r\n            serializeData(settings)\r\n\r\n            var dataType = settings.dataType, hasPlaceholder = /\\?.+=\\?/.test(settings.url)\r\n            if (hasPlaceholder) dataType = 'jsonp'\r\n\r\n            if (settings.cache === false || (\r\n                    (!options || options.cache !== true) &&\r\n                    ('script' == dataType || 'jsonp' == dataType)\r\n                ))\r\n                settings.url = appendQuery(settings.url, '_=' + Date.now())\r\n\r\n            if ('jsonp' == dataType) {\r\n                if (!hasPlaceholder)\r\n                    settings.url = appendQuery(settings.url,\r\n                        settings.jsonp ? (settings.jsonp + '=?') : settings.jsonp === false ? '' : 'callback=?')\r\n                return $.ajaxJSONP(settings, deferred)\r\n            }\r\n\r\n            var mime = settings.accepts[dataType],\r\n                headers = { },\r\n                setHeader = function(name, value) { headers[name.toLowerCase()] = [name, value] },\r\n                protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol,\r\n                xhr = settings.xhr(),\r\n                nativeSetHeader = xhr.setRequestHeader,\r\n                abortTimeout\r\n\r\n            if (deferred) deferred.promise(xhr)\r\n\r\n            if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest')\r\n            setHeader('Accept', mime || '*/*')\r\n            if (mime = settings.mimeType || mime) {\r\n                if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]\r\n                xhr.overrideMimeType && xhr.overrideMimeType(mime)\r\n            }\r\n            if (settings.contentType || (settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET'))\r\n                setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded')\r\n\r\n            if (settings.headers) for (name in settings.headers) setHeader(name, settings.headers[name])\r\n            xhr.setRequestHeader = setHeader\r\n\r\n            xhr.onreadystatechange = function(){\r\n                if (xhr.readyState == 4) {\r\n                    xhr.onreadystatechange = empty\r\n                    clearTimeout(abortTimeout)\r\n                    var result, error = false\r\n                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {\r\n                        dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'))\r\n\r\n                        if (xhr.responseType == 'arraybuffer' || xhr.responseType == 'blob')\r\n                            result = xhr.response\r\n                        else {\r\n                            result = xhr.responseText\r\n\r\n                            try {\r\n                                // http://perfectionkills.com/global-eval-what-are-the-options/\r\n                                // sanitize response accordingly if data filter callback provided\r\n                                result = ajaxDataFilter(result, dataType, settings)\r\n                                if (dataType == 'script')    (1,eval)(result)\r\n                                else if (dataType == 'xml')  result = xhr.responseXML\r\n                                else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result)\r\n                            } catch (e) { error = e }\r\n\r\n                            if (error) return ajaxError(error, 'parsererror', xhr, settings, deferred)\r\n                        }\r\n\r\n                        ajaxSuccess(result, xhr, settings, deferred)\r\n                    } else {\r\n                        ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred)\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (ajaxBeforeSend(xhr, settings) === false) {\r\n                xhr.abort()\r\n                ajaxError(null, 'abort', xhr, settings, deferred)\r\n                return xhr\r\n            }\r\n\r\n            var async = 'async' in settings ? settings.async : true\r\n            xhr.open(settings.type, settings.url, async, settings.username, settings.password)\r\n\r\n            if (settings.xhrFields) for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name]\r\n\r\n            for (name in headers) nativeSetHeader.apply(xhr, headers[name])\r\n\r\n            if (settings.timeout > 0) abortTimeout = setTimeout(function(){\r\n                xhr.onreadystatechange = empty\r\n                xhr.abort()\r\n                ajaxError(null, 'timeout', xhr, settings, deferred)\r\n            }, settings.timeout)\r\n\r\n            // avoid sending empty string (#319)\r\n            xhr.send(settings.data ? settings.data : null)\r\n            return xhr\r\n        }\r\n\r\n        // handle optional data/success arguments\r\n        function parseArguments(url, data, success, dataType) {\r\n            if ($.isFunction(data)) dataType = success, success = data, data = undefined\r\n            if (!$.isFunction(success)) dataType = success, success = undefined\r\n            return {\r\n                url: url\r\n                , data: data\r\n                , success: success\r\n                , dataType: dataType\r\n            }\r\n        }\r\n\r\n        $.get = function(/* url, data, success, dataType */){\r\n            return $.ajax(parseArguments.apply(null, arguments))\r\n        }\r\n\r\n        $.post = function(/* url, data, success, dataType */){\r\n            var options = parseArguments.apply(null, arguments)\r\n            options.type = 'POST'\r\n            return $.ajax(options)\r\n        }\r\n\r\n        $.getJSON = function(/* url, data, success */){\r\n            var options = parseArguments.apply(null, arguments)\r\n            options.dataType = 'json'\r\n            return $.ajax(options)\r\n        }\r\n\r\n        $.fn.load = function(url, data, success){\r\n            if (!this.length) return this\r\n            var self = this, parts = url.split(/\\s/), selector,\r\n                options = parseArguments(url, data, success),\r\n                callback = options.success\r\n            if (parts.length > 1) options.url = parts[0], selector = parts[1]\r\n            options.success = function(response){\r\n                self.html(selector ?\r\n                    $('<div>').html(response.replace(rscript, \"\")).find(selector)\r\n                    : response)\r\n                callback && callback.apply(self, arguments)\r\n            }\r\n            $.ajax(options)\r\n            return this\r\n        }\r\n\r\n        var escape = encodeURIComponent\r\n\r\n        function serialize(params, obj, traditional, scope){\r\n            var type, array = $.isArray(obj), hash = $.isPlainObject(obj)\r\n            $.each(obj, function(key, value) {\r\n                type = $.type(value)\r\n                if (scope) key = traditional ? scope :\r\n                scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']'\r\n                // handle data in serializeArray() format\r\n                if (!scope && array) params.add(value.name, value.value)\r\n                // recurse into nested objects\r\n                else if (type == \"array\" || (!traditional && type == \"object\"))\r\n                    serialize(params, value, traditional, key)\r\n                else params.add(key, value)\r\n            })\r\n        }\r\n\r\n        $.param = function(obj, traditional){\r\n            var params = []\r\n            params.add = function(key, value) {\r\n                if ($.isFunction(value)) value = value()\r\n                if (value == null) value = \"\"\r\n                this.push(escape(key) + '=' + escape(value))\r\n            }\r\n            serialize(params, obj, traditional)\r\n            return params.join('&').replace(/%20/g, '+')\r\n        }\r\n    })(Zepto)\r\n\r\n    ;(function($){\r\n        $.fn.serializeArray = function() {\r\n            var name, type, result = [],\r\n                add = function(value) {\r\n                    if (value.forEach) return value.forEach(add)\r\n                    result.push({ name: name, value: value })\r\n                }\r\n            if (this[0]) $.each(this[0].elements, function(_, field){\r\n                type = field.type, name = field.name\r\n                if (name && field.nodeName.toLowerCase() != 'fieldset' &&\r\n                    !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' &&\r\n                    ((type != 'radio' && type != 'checkbox') || field.checked))\r\n                    add($(field).val())\r\n            })\r\n            return result\r\n        }\r\n\r\n        $.fn.serialize = function(){\r\n            var result = []\r\n            this.serializeArray().forEach(function(elm){\r\n                result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value))\r\n            })\r\n            return result.join('&')\r\n        }\r\n\r\n        $.fn.submit = function(callback) {\r\n            if (0 in arguments) this.bind('submit', callback)\r\n            else if (this.length) {\r\n                var event = $.Event('submit')\r\n                this.eq(0).trigger(event)\r\n                if (!event.isDefaultPrevented()) this.get(0).submit()\r\n            }\r\n            return this\r\n        }\r\n\r\n    })(Zepto)\r\n\r\n    ;(function(){\r\n        // getComputedStyle shouldn't freak out when called\r\n        // without a valid element as argument\r\n        try {\r\n            getComputedStyle(undefined)\r\n        } catch(e) {\r\n            var nativeGetComputedStyle = getComputedStyle\r\n            window.getComputedStyle = function(element, pseudoElement){\r\n                try {\r\n                    return nativeGetComputedStyle(element, pseudoElement)\r\n                } catch(e) {\r\n                    return null\r\n                }\r\n            }\r\n        }\r\n    })()\r\n    return Zepto\r\n}))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports){eval("'use strict';\n\n//     Zepto.js\n//     (c) 2010-2016 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n;(function ($) {\n    var touch = {},\n        touchTimeout,\n        tapTimeout,\n        swipeTimeout,\n        longTapTimeout,\n        longTapDelay = 300,\n        gesture;\n\n    function swipeDirection(x1, x2, y1, y2) {\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? 'Left' : 'Right' : y1 - y2 > 0 ? 'Up' : 'Down';\n    }\n\n    function longTap() {\n        longTapTimeout = null;\n        if (touch.last) {\n            touch.el.trigger('longTap');\n            touch = {};\n        }\n    }\n\n    function cancelLongTap() {\n        if (longTapTimeout) clearTimeout(longTapTimeout);\n        longTapTimeout = null;\n    }\n\n    function cancelAll() {\n        if (touchTimeout) clearTimeout(touchTimeout);\n        if (tapTimeout) clearTimeout(tapTimeout);\n        if (swipeTimeout) clearTimeout(swipeTimeout);\n        if (longTapTimeout) clearTimeout(longTapTimeout);\n        touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = null;\n        touch = {};\n    }\n\n    function isPrimaryTouch(event) {\n        return (event.pointerType == 'touch' || event.pointerType == event.MSPOINTER_TYPE_TOUCH) && event.isPrimary;\n    }\n\n    function isPointerEventType(e, type) {\n        return e.type == 'pointer' + type || e.type.toLowerCase() == 'mspointer' + type;\n    }\n\n    $(document).ready(function () {\n        var now,\n            delta,\n            deltaX = 0,\n            deltaY = 0,\n            firstTouch,\n            _isPointerType;\n\n        if ('MSGesture' in window) {\n            gesture = new MSGesture();\n            gesture.target = document.body;\n        }\n\n        $(document).bind('MSGestureEnd', function (e) {\n            var swipeDirectionFromVelocity = e.velocityX > 1 ? 'Right' : e.velocityX < -1 ? 'Left' : e.velocityY > 1 ? 'Down' : e.velocityY < -1 ? 'Up' : null;\n            if (swipeDirectionFromVelocity) {\n                touch.el.trigger('swipe');\n                touch.el.trigger('swipe' + swipeDirectionFromVelocity);\n            }\n        }).on('touchstart MSPointerDown pointerdown', function (e) {\n            if ((_isPointerType = isPointerEventType(e, 'down')) && !isPrimaryTouch(e)) return;\n            firstTouch = _isPointerType ? e : e.touches[0];\n            if (e.touches && e.touches.length === 1 && touch.x2) {\n                // Clear out touch movement data if we have it sticking around\n                // This can occur if touchcancel doesn't fire due to preventDefault, etc.\n                touch.x2 = undefined;\n                touch.y2 = undefined;\n            }\n            now = Date.now();\n            delta = now - (touch.last || now);\n            touch.el = $('tagName' in firstTouch.target ? firstTouch.target : firstTouch.target.parentNode);\n            touchTimeout && clearTimeout(touchTimeout);\n            touch.x1 = firstTouch.pageX;\n            touch.y1 = firstTouch.pageY;\n            if (delta > 0 && delta <= 250) touch.isDoubleTap = true;\n            touch.last = now;\n            longTapTimeout = setTimeout(longTap, longTapDelay);\n            // adds the current touch contact for IE gesture recognition\n            if (gesture && _isPointerType) gesture.addPointer(e.pointerId);\n        }).on('touchmove MSPointerMove pointermove', function (e) {\n            if ((_isPointerType = isPointerEventType(e, 'move')) && !isPrimaryTouch(e)) return;\n            firstTouch = _isPointerType ? e : e.touches[0];\n            cancelLongTap();\n            touch.x2 = firstTouch.pageX;\n            touch.y2 = firstTouch.pageY;\n\n            deltaX += Math.abs(touch.x1 - touch.x2);\n            deltaY += Math.abs(touch.y1 - touch.y2);\n        }).on('touchend MSPointerUp pointerup', function (e) {\n            if ((_isPointerType = isPointerEventType(e, 'up')) && !isPrimaryTouch(e)) return;\n            cancelLongTap();\n\n            // swipe\n            if (touch.x2 && Math.abs(touch.x1 - touch.x2) > 30 || touch.y2 && Math.abs(touch.y1 - touch.y2) > 30) swipeTimeout = setTimeout(function () {\n                if (touch.el) {\n                    touch.el.trigger('swipe');\n                    touch.el.trigger('swipe' + swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2));\n                }\n                touch = {};\n            }, 0);\n\n            // normal tap\n            else if ('last' in touch)\n                    // don't fire tap when delta position changed by more than 30 pixels,\n                    // for instance when moving to a point and back to origin\n                    if (deltaX < 30 && deltaY < 30) {\n                        // delay by one tick so we can cancel the 'tap' event if 'scroll' fires\n                        // ('tap' fires before 'scroll')\n                        tapTimeout = setTimeout(function () {\n\n                            // trigger universal 'tap' with the option to cancelTouch()\n                            // (cancelTouch cancels processing of single vs double taps for faster 'tap' response)\n                            var event = $.Event('tap');\n                            event.cancelTouch = cancelAll;\n                            // [by paper] fix -> \"TypeError: 'undefined' is not an object (evaluating 'touch.el.trigger'), when double tap\n                            if (touch.el) touch.el.trigger(event);\n\n                            // trigger double tap immediately\n                            if (touch.isDoubleTap) {\n                                if (touch.el) touch.el.trigger('doubleTap');\n                                touch = {};\n                            }\n\n                            // trigger single tap after 250ms of inactivity\n                            else {\n                                    touchTimeout = setTimeout(function () {\n                                        touchTimeout = null;\n                                        if (touch.el) touch.el.trigger('singleTap');\n                                        touch = {};\n                                    }, 250);\n                                }\n                        }, 0);\n                    } else {\n                        touch = {};\n                    }\n            deltaX = deltaY = 0;\n        })\n        // when the browser window loses focus,\n        // for example when a modal dialog is shown,\n        // cancel all ongoing events\n        .on('touchcancel MSPointerCancel pointercancel', cancelAll);\n\n        // scrolling the window indicates intention of the user\n        // to scroll, not tap or swipe, so cancel all ongoing events\n        $(window).on('scroll', cancelAll);\n    });['swipe', 'swipeLeft', 'swipeRight', 'swipeUp', 'swipeDown', 'doubleTap', 'tap', 'singleTap', 'longTap'].forEach(function (eventName) {\n        $.fn[eventName] = function (callback) {\n            return this.on(eventName, callback);\n        };\n    });\n})(Zepto);//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports){eval('"use strict";\n\n;(function () {\n  function t(n, t, r) {\n    for (var e, u = 0, f = t.length; u < f; u++) {\n      e = t[u], i(n, e, r);\n    }\n  }function i(n, t, i) {\n    Object.defineProperty(n, t, { get: function get() {\n        return this["_" + t];\n      }, set: function set(n) {\n        n !== this["_" + t] && (this["_" + t] = n, i());\n      } });\n  }var n = function n(_n, t, i, r, u, f, e, o, s, h, c, l, a, v, y, p) {\n    this.elements = window.Float32Array ? new Float32Array(16) : [];var w = this.elements;w[0] = _n !== undefined ? _n : 1;w[4] = t || 0;w[8] = i || 0;w[12] = r || 0;w[1] = u || 0;w[5] = f !== undefined ? f : 1;w[9] = e || 0;w[13] = o || 0;w[2] = s || 0;w[6] = h || 0;w[10] = c !== undefined ? c : 1;w[14] = l || 0;w[3] = a || 0;w[7] = v || 0;w[11] = y || 0;w[15] = p !== undefined ? p : 1;\n  };n.DEG_TO_RAD = Math.PI / 180;n.prototype = { set: function set(n, t, i, r, u, f, e, o, s, h, c, l, a, v, y, p) {\n      var w = this.elements;return w[0] = n, w[4] = t, w[8] = i, w[12] = r, w[1] = u, w[5] = f, w[9] = e, w[13] = o, w[2] = s, w[6] = h, w[10] = c, w[14] = l, w[3] = a, w[7] = v, w[11] = y, w[15] = p, this;\n    }, identity: function identity() {\n      return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;\n    }, multiplyMatrices: function multiplyMatrices(n, t) {\n      var i = n.elements,\n          r = this.elements,\n          u = i[0],\n          f = i[4],\n          e = i[8],\n          o = i[12],\n          s = i[1],\n          h = i[5],\n          c = i[9],\n          l = i[13],\n          a = i[2],\n          v = i[6],\n          y = i[10],\n          p = i[14],\n          w = i[3],\n          b = i[7],\n          k = i[11],\n          d = i[15],\n          g = t[0],\n          nt = t[1],\n          tt = t[2],\n          it = t[3],\n          rt = t[4],\n          ut = t[5],\n          ft = t[6],\n          et = t[7],\n          ot = t[8],\n          st = t[9],\n          ht = t[10],\n          ct = t[11],\n          lt = t[12],\n          at = t[13],\n          vt = t[14],\n          yt = t[15];return r[0] = u * g + f * rt + e * ot + o * lt, r[4] = u * nt + f * ut + e * st + o * at, r[8] = u * tt + f * ft + e * ht + o * vt, r[12] = u * it + f * et + e * ct + o * yt, r[1] = s * g + h * rt + c * ot + l * lt, r[5] = s * nt + h * ut + c * st + l * at, r[9] = s * tt + h * ft + c * ht + l * vt, r[13] = s * it + h * et + c * ct + l * yt, r[2] = a * g + v * rt + y * ot + p * lt, r[6] = a * nt + v * ut + y * st + p * at, r[10] = a * tt + v * ft + y * ht + p * vt, r[14] = a * it + v * et + y * ct + p * yt, r[3] = w * g + b * rt + k * ot + d * lt, r[7] = w * nt + b * ut + k * st + d * at, r[11] = w * tt + b * ft + k * ht + d * vt, r[15] = w * it + b * et + k * ct + d * yt, this;\n    }, _rounded: function _rounded(n, t) {\n      return t = Math.pow(10, t || 15), Math.round(n * t) / t;\n    }, _arrayWrap: function _arrayWrap(n) {\n      return window.Float32Array ? new Float32Array(n) : n;\n    }, appendTransform: function appendTransform(t, i, r, u, f, e, o, s, h, c, l, a, v, y) {\n      var p = o * n.DEG_TO_RAD,\n          w = this._rounded(Math.cos(p)),\n          b = this._rounded(Math.sin(p)),\n          k = s * n.DEG_TO_RAD,\n          d = this._rounded(Math.cos(k)),\n          g = this._rounded(Math.sin(k)),\n          nt = h * n.DEG_TO_RAD,\n          tt = this._rounded(Math.cos(nt * -1)),\n          it = this._rounded(Math.sin(nt * -1));return this.multiplyMatrices(this, this._arrayWrap([1, 0, 0, t, 0, w, b, i, 0, -b, w, r, 0, 0, 0, 1])), this.multiplyMatrices(this, this._arrayWrap([d, 0, g, 0, 0, 1, 0, 0, -g, 0, d, 0, 0, 0, 0, 1])), this.multiplyMatrices(this, this._arrayWrap([tt * u, it * f, 0, 0, -it * u, tt * f, 0, 0, 0, 0, 1 * e, 0, 0, 0, 0, 1])), (c || l) && this.multiplyMatrices(this, this._arrayWrap([this._rounded(Math.cos(c * n.DEG_TO_RAD)), this._rounded(Math.sin(c * n.DEG_TO_RAD)), 0, 0, -1 * this._rounded(Math.sin(l * n.DEG_TO_RAD)), this._rounded(Math.cos(l * n.DEG_TO_RAD)), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])), (a || v || y) && (this.elements[12] -= a * this.elements[0] + v * this.elements[4] + y * this.elements[8], this.elements[13] -= a * this.elements[1] + v * this.elements[5] + y * this.elements[9], this.elements[14] -= a * this.elements[2] + v * this.elements[6] + y * this.elements[10]), this;\n    } };window.Transform = function (i, r) {\n    t(i, ["translateX", "translateY", "translateZ", "scaleX", "scaleY", "scaleZ", "rotateX", "rotateY", "rotateZ", "skewX", "skewY", "originX", "originY", "originZ"], function () {\n      var n = i.matrix3D.identity().appendTransform(i.translateX, i.translateY, i.translateZ, i.scaleX, i.scaleY, i.scaleZ, i.rotateX, i.rotateY, i.rotateZ, i.skewX, i.skewY, i.originX, i.originY, i.originZ);i.style.transform = i.style.msTransform = i.style.OTransform = i.style.MozTransform = i.style.webkitTransform = (r ? "" : "perspective(" + (i.perspective === undefined ? 500 : i.perspective) + "px) ") + "matrix3d(" + Array.prototype.slice.call(n.elements).join(",") + ")";\n    });i.matrix3D = new n();r || (t(i, ["perspective"], function () {\n      i.style.transform = i.style.msTransform = i.style.OTransform = i.style.MozTransform = i.style.webkitTransform = "perspective(" + i.perspective + "px) matrix3d(" + Array.prototype.slice.call(i.matrix3D.elements).join(",") + ")";\n    }), i.perspective = 500);i.scaleX = i.scaleY = i.scaleZ = 1;i.translateX = i.translateY = i.translateZ = i.rotateX = i.rotateY = i.rotateZ = i.skewX = i.skewY = i.originX = i.originY = i.originZ = 0;\n  };\n})();//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
}]);